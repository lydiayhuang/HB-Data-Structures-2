Part 1: Discussion Questions

Make a new file and add your answers to the questions below. Push the file to your github repository along with the other solutions.

Recursion

In your own words, what is recursion? 
Answer: Refactoring the function within itself and needs a basecase as a stopper. Otherwise, infinite loop.

Why is it necessary to have a base case?
Answer: Otherwise, the function won't have a stopping point.


Graphs

What is a graph? 
Answer: A collection of nodes and edges which connects nodes in the graph.


How is a graph different from a tree?
Answer: Trees have child parent relationships where the child only has one parent. Graphs don't.

Give an example of something that would be good to model with a graph.
Performance of Different Data Structures
Answer: Facebook.

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.

Fill in the runtimes for the following actions for the table below:

Data Structure	Index	Search	Add-R	Add-L	Pop-L	Pop-R
Python List 	O(1)	O(n)	O(1)	O(n)	O(n)	O(1)	 	 	 
Linked List	 	O(n)	O(n)	O(1)	O(1)	O(1)	O(1)	 	 	 	 
Doubly-Linked 	O(n)	O(n)	O(1)	O(1)	O(1)	O(1) 	 	 	 	 	 
Queue (as Array)  X		  	X	 O(1)		X	O(n)		X
Queue (as LL or DLL)X		X	 O(n)		X	O(1)		X
Stack (as Array, LL, or DLL)	 O(1)		X	  X	 	  O(1)	 
Deque (as DLL)		X		X	 O(1) 	 O(1)	O(1) 	  O(1)
Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node
Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure			Get		Add		Delete	Iterate	Memory
Dictionary (Hash Map)	O(1)	O(1)	O(1)	O(n)	medium
Set (Hash Map)	  		O(1)	O(1)	O(1)	O(n)	medium	 	 	 	 
Binary Search Tree	 	O(log n)O(log n)O(log n)O(log n)a lot	 	 	 
Tree	 	 	 	 	O(n)    O(n)	O(n)   O(n)		a little
Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)
Sorting

Describe in words how the Bubble Sort algorithm works.
Answer: Start at one element and compare the next one, order it. Then do it again for the second element until you reach the end, then start at the beginning again to finally arrive at the fully sorted list.

Describe in words how the Merge Sort algorithm works.
Anwer: Divides a list in half, sorts the two lists recursively, then merges the two back together.

Describe in words how the Quick Sort algorithm works.
Answer: Works similarily to merge sort but potentially has better runtime.
